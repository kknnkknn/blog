<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>___</title><link>https://kknnkknn.github.io/blog/</link><description>Recent content on ___</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sun, 20 Apr 2025 23:01:52 +0900</lastBuildDate><atom:link href="https://kknnkknn.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>AVL木の性質</title><link>https://kknnkknn.github.io/blog/article/avl-balance-tree/</link><pubDate>Sun, 20 Apr 2025 23:01:52 +0900</pubDate><guid>https://kknnkknn.github.io/blog/article/avl-balance-tree/</guid><description>はじめに 見出しへのリンク 平衡二分探索木の実装と使い分けを整理したくなったので、簡潔にまとめる。
数あるバリエーションのうち、本記事では
AVL木（高さ差を±1で厳密に保つ・簡潔な実装） に絞って解説する。 赤黒木や Treap などの他の平衡二分探索木については後日記事を追加する予定。
参考文献は主に『アルゴリズムイントロダクション』（第3版和訳）と Sedgewick &amp;amp; Wayne『Algorithms, 4th Edition』を参照。誤りがあれば指摘求む。
基本概念 見出しへのリンク ノードの構造とバランス係数 見出しへのリンク 高さの上界と計算量 見出しへのリンク BST との違い・メリット 見出しへのリンク 回転パターンの図解 見出しへのリンク 次は回転について説明する。 平衡二分探索木では、木の順序(左ノード &amp;lt; 親ノード &amp;lt; 右ノード) を 壊さずに高さを整えるために回転という操作を行う。 AVL 木で実際に必要な回転は次の 4 パターン だけ。
LL（右回転） 見出しへのリンク 色付きのノードを右に回転する
4 の左の子を 2 の右の部分木(3)につけ直す 2 をルートにして、4 を 2 の右の子として接続する 4 -&amp;gt; 2 の順に高さ/バランス係数を再計算する RR（左回転） 見出しへのリンク LL(右回転)を逆にしただけ。 手順は
1 の右の子を 3 の左の部分木(2)につけ直す 3 をルートにして、1 を 3 の左の子として接続する 1 -&amp;gt; 3 の順に高さ/バランス係数を再計算する LR（左‑右回転） 見出しへのリンク 左のノードの右部分木が伸びているパターン。 １回右回転してLLのパターンにしてから左に回転してバランスを取る。 RL（右‑左回転） 見出しへのリンク 実装(C++) 見出しへのリンク ノードと木の定義 見出しへのリンク template &amp;lt;typename T&amp;gt; struct AVLNode { T data; AVLNode* left = nullptr; AVLNode* right = nullptr; int8_t balance = 0; // -1 &amp;lt;= balance &amp;lt;= 1 }; template &amp;lt;typename T&amp;gt; class AVLTree { public: void insert(const T&amp;amp; key); void erase(const T&amp;amp; key); bool search(const T&amp;amp; key) const; void clear(); private: AVLNode&amp;lt;T&amp;gt; *root = nullptr; int height(AVLNode&amp;lt;T&amp;gt;* n) const; void update(AVLNode&amp;lt;T&amp;gt;* n); AVLNode&amp;lt;T&amp;gt; *rotateLeft(AVLNode&amp;lt;T&amp;gt; *x); AVLNode&amp;lt;T&amp;gt; *rotateRight(AVLNode&amp;lt;T&amp;gt; *y); AVLNode&amp;lt;T&amp;gt; *rebalance(AVLNode&amp;lt;T&amp;gt; *n); AVLNode&amp;lt;T&amp;gt; *insertImpl(AVLNode&amp;lt;T&amp;gt; *n, const T&amp;amp; key); AVLNode&amp;lt;T&amp;gt; *eraseImpl(AVLNode&amp;lt;T&amp;gt; *n, const T&amp;amp; key); }; 挿入 見出しへのリンク template&amp;lt;typename T&amp;gt; void AVLTree&amp;lt;T&amp;gt;::insert(const T&amp;amp; key) { root = insertImpl(root, key); } template&amp;lt;typename T&amp;gt; AVLNode&amp;lt;T&amp;gt;* AVLTree&amp;lt;T&amp;gt;::insertImpl(AVLNode&amp;lt;T&amp;gt; *n, const T&amp;amp; key) { if (n == nullptr) { return new AVLNode&amp;lt;T&amp;gt;(key, nullptr, nullptr, 0); } if (n-&amp;gt;data &amp;gt; key) { n-&amp;gt;left = insertImpl(n-&amp;gt;left, key); } else if (n-&amp;gt;data &amp;lt; key) { n-&amp;gt;right = insertImpl(n-&amp;gt;right, key); } else { return n; } n-&amp;gt;bal = height(n-&amp;gt;left) - height(n-&amp;gt;right); return rebalance(n); } 削除 見出しへのリンク 探索 見出しへのリンク テスト用 main と assert 見出しへのリンク ユースケースと実務採用例 見出しへのリンク SQLite インデックス 競技プログラミング用ライブラリ その他 DB エンジンとの比較 8.</description></item><item><title>映画見た(『悪は存在しない』)</title><link>https://kknnkknn.github.io/blog/article/%E6%98%A0%E7%94%BB%E8%A6%8B%E3%81%9F%E6%82%AA%E3%81%AF%E5%AD%98%E5%9C%A8%E3%81%97%E3%81%AA%E3%81%84/</link><pubDate>Mon, 13 May 2024 23:10:18 +0900</pubDate><guid>https://kknnkknn.github.io/blog/article/%E6%98%A0%E7%94%BB%E8%A6%8B%E3%81%9F%E6%82%AA%E3%81%AF%E5%AD%98%E5%9C%A8%E3%81%97%E3%81%AA%E3%81%84/</guid><description> 見た 見出しへのリンク 職場上がりに映画館に行って見た. 私は社会人学生なので学生料金で見ることができたはずだが,
学生証を忘れていたため一般料金を支払った. 数少ない社会人学生であるメリットが…
感想 見出しへのリンク おおむね面白かった. 環境の変化でここ一年映画を全く見られていなかったため,
単に劇場で映画を見るという体験が楽しかった. とはいえ作品自体も面白かったと思う.
以下雑多に感想を述べる.
対立構造が陳腐 見出しへのリンク 作中前半に示される自然 vs 文明の構図が(後半ずらされるにしても)陳腐.
うどんに使う水が澄んでいて～の下りはなんか「美味しんぼかよw」と思ってしまった.
社長やコンサルにどやされる場面や車中での高橋と黛のやりとりで,
どちらかというと同情してしまうのはグランピング側になるし,
それにそもそもこの作中の自然は単なる母なる自然みたいなものではなく
名状しがたい暴力的なもの(これがラストに繋がる)だと思われるので,
単純な対立に落とし込まないように努力している様子は見られる.
ただそのずらし方も含めてけっこうありがちな感じが…
トキシックな男性がかわいらしい(最後に死ぬところも含め) 見出しへのリンク 車中のやりとりが素晴らしい. 高橋が大声を張り上げて, 黛のリアクションを見て
自らの攻撃性を冗談にしようとするところ(和やかな雰囲気にしようとしているが少しぎこちない)は最高.
前後含めて監督の最良の面が表れている場面だと思う.
町民が喋っている間にペットボトルを飲んで, イライラしてきたら黛に全て喋らすのも最低で素晴らしい.
死ぬのは物語的必然 見出しへのリンク 感想を漁っているとラストの「考察」ばかり見るのだが, 整合的な解釈を考えるのはあまり意味がなさそう.
どちらかというと, 冒頭チェンソーの轟音から始まり不穏なストリングスが絶えず鳴り続ける雰囲気が,
サスペンスやホラーの文脈っぽくみえてしまった.
そう考えると滑稽で馬鹿な男性(同情には値する)が死ぬのは当然だ(死んでいるかは曖昧にされているけど)
呑気にグランピングの管理人としてのセカンドライフを語りだす下りなんかは, よくある死亡フラグのそれにしか見えない.
気持ち悪いショット 見出しへのリンク だるまさんが転んだのところ 鹿の骨目線のショット</description></item><item><title>Blog作った</title><link>https://kknnkknn.github.io/blog/article/blog%E4%BD%9C%E3%81%A3%E3%81%9F/</link><pubDate>Wed, 08 May 2024 16:30:09 +0000</pubDate><guid>https://kknnkknn.github.io/blog/article/blog%E4%BD%9C%E3%81%A3%E3%81%9F/</guid><description>Blog 作った 見出しへのリンク Output する場所用意しとくか, という気分になったので作った. こまめに更新したい.
how 見出しへのリンク hugo + Github Pages でさらっとやった. 特にコメントすることなし.</description></item><item><title/><link>https://kknnkknn.github.io/blog/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kknnkknn.github.io/blog/about/</guid><description>Name 見出しへのリンク nk</description></item></channel></rss>